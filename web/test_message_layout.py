#!/usr/bin/env python3
"""
Natter IYUU消息布局测试脚本
演示优化后的推送消息格式
"""

import time
import sys
import os

def create_test_notification_layout():
    """创建测试通知布局"""
    categories = {
        "启动": [
            {
                "title": "[启动] 测试服务",
                "content": "服务已成功启动\n服务ID: test123\n本地端口: 80\n启动时间: 2024-05-27 10:30:00"
            }
        ],
        "地址变更": [
            {
                "title": "[地址变更] 测试服务",
                "content": "服务映射地址已变更\n服务ID: test123\n旧地址: tcp://1.2.3.4:1234\n新地址: tcp://5.6.7.8:5678\n变更时间: 2024-05-27 10:35:00"
            }
        ],
        "错误": [
            {
                "title": "[错误] 测试服务",
                "content": "服务出现错误\n错误类型: 连接超时\n服务ID: test123\n错误详情: 无法连接到远程服务器"
            }
        ]
    }
    
    current_time = time.strftime('%Y-%m-%d %H:%M:%S')
    total_messages = sum(len(msgs) for msgs in categories.values())
    
    # 消息头部
    content = f"""╭─────────── 🔔 Natter 服务通知 ───────────╮
│                                          │
│  📅 时间：{current_time}      │
│  📊 消息：{total_messages} 条更新                        │
│                                          │
╰──────────────────────────────────────────╯

🎯 **服务映射概览**
┌─────────────────────────────────────────┐
│ 🟢 **测试服务**
│   🔗 `tcp://5.6.7.8:5678`
│
└─────────────────────────────────────────┘

"""

    # 处理各类消息
    styles = {
        "启动": {
            "icon": "🚀",
            "separator": "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        },
        "地址变更": {
            "icon": "🔄",
            "separator": "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
        },
        "错误": {
            "icon": "⚠️",
            "separator": "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        }
    }
    
    for cat, messages in categories.items():
        style = styles.get(cat, {"icon": "📌", "separator": "─" * 41})
        
        content += f"""🔸 **{style['icon']} {cat}** ({len(messages)}条)
{style['separator']}
"""
        
        for i, msg in enumerate(messages, 1):
            service_name = msg["title"].split(']')[-1].strip() if ']' in msg["title"] else msg["title"]
            
            if cat == "错误":
                content += f"""
🔹 **任务 {i}：{service_name}**
```
服务出现错误
错误类型: 连接超时
ID: test123
错误详情: 无法连接到远程服务器
```
"""
            else:
                key_info = "✅ 服务已成功启动" if cat == "启动" else "🔄 地址变更：`tcp://1.2.3.4:1234` → `tcp://5.6.7.8:5678`"
                content += f"""
🔸 **{service_name}**
   {key_info}
"""
        
        content += "\n"

    # 消息尾部
    content += """┌─────────────────────────────────────────┐
│  💡 通过 Natter 管理界面可以管理服务    │
│  🌐 访问地址：http://localhost:8080     │
└─────────────────────────────────────────┘"""

    return content

def create_test_daily_report():
    """创建测试日报布局"""
    current_time = time.strftime('%Y-%m-%d %H:%M:%S')
    report_date = time.strftime('%Y年%m月%d日')
    
    content = f"""╭─────────── 📊 Natter 服务日报 ───────────╮
│                                          │
│  📅 日期：{report_date}            │
│  ⏰ 时间：{current_time}      │
│                                          │
╰──────────────────────────────────────────╯

🎯 **服务概览** 
┌─────────────────────────────────────────┐
│  📦 总服务数： 3 个                        │
│  🟢 运行中　： 2 个                        │
│  🔴 已停止　： 1 个                        │
└─────────────────────────────────────────┘

🔸 **服务详情**
═══════════════════════════════════════════

🔹 **01. Web服务器**
   ├─ 状态：🟢 运行中
   ├─ 映射：🔗 `tcp://117.151.15.179:11404`
   ├─ LAN： 🔴 CLOSED
   ├─ WAN： 🔴 CLOSED
   └─ NAT： 🔍 Port Restricted NAT (端口受限)

🔹 **02. 数据库服务**
   ├─ 状态：🟢 运行中
   ├─ 映射：🔗 `tcp://117.151.15.179:22001`
   ├─ LAN： 🔴 CLOSED
   ├─ WAN： 🟢 OPEN
   └─ NAT： 🔍 Symmetric NAT (对称型)

🔹 **03. 测试服务**
   ├─ 状态：🔴 已停止
   ├─ 映射：🔗 `无映射`
   ├─ LAN： ⚪ 未知
   ├─ WAN： ⚪ 未知
   └─ NAT： 🔍 无映射地址

┌─────────────────────────────────────────┐
│  💡 访问管理界面：http://localhost:8080  │
│  📱 通过界面可以实时管理所有服务        │
└─────────────────────────────────────────┘"""

    return content

def create_test_startup_notification():
    """创建测试启动通知布局"""
    current_time = time.strftime('%Y-%m-%d %H:%M:%S')
    
    content = f"""╭─────────── 🚀 Natter 管理服务 ───────────╮
│                                          │
│  ✅ 服务启动成功                        │
│  ⏰ 启动时间：{current_time}      │
│                                          │
╰──────────────────────────────────────────╯

🔧 **服务配置**
┌─────────────────────────────────────────┐
│  🌐 访问地址：http://0.0.0.0:8080           │
│  📨 IYUU推送：✅ 已启用              │
│  ⏰ 定时推送：✅ 已启用              │
└─────────────────────────────────────────┘

🎯 **已加载服务映射** (3个服务)
═══════════════════════════════════════════
   📦 总数：3 个
   🟢 运行：2 个
   🔴 停止：1 个

🔹 **01. Web服务器**
   └─ 🟢 🔗 `tcp://117.151.15.179:11404`

🔹 **02. 数据库服务**
   └─ 🟢 🔗 `tcp://117.151.15.179:22001`

🔹 **03. 测试服务**
   └─ 🔴 ⏳ 等待分配映射地址

┌─────────────────────────────────────────┐
│  🎉 Natter 管理服务已就绪！            │
│  📱 现在可以通过界面管理所有服务        │
│  💡 支持实时状态监控和推送通知          │
└─────────────────────────────────────────┘"""

    return content

def create_test_message():
    """创建测试消息布局"""
    current_time = time.strftime('%Y-%m-%d %H:%M:%S')
    
    content = f"""╭─────────── 🔔 Natter 测试通知 ───────────╮
│                                          │
│  ✅ IYUU 推送功能测试                   │
│  ⏰ 测试时间：{current_time}      │
│                                          │
╰──────────────────────────────────────────╯

🎯 **系统状态检查**
┌─────────────────────────────────────────┐
│  🖥️  运行环境：💻 主机系统              │
│  🐍 Python版本：3.10.12                 │
│  💿 操作系统　：linux                      │
└─────────────────────────────────────────┘

🔸 **服务概况**
═══════════════════════════════════════════
   📦 总服务数： 3 个
   🟢 运行中　： 2 个  
   🔴 已停止　： 1 个

┌─────────────────────────────────────────┐
│  ✨ 推送功能正常运行！                  │
│  💌 您已成功接收到此测试通知            │
│  🔧 可以通过管理界面配置更多服务        │
└─────────────────────────────────────────┘"""

    return content

def main():
    """主函数"""
    print("=" * 60)
    print("🔔 Natter IYUU 消息布局优化演示")
    print("=" * 60)
    
    tests = [
        ("📱 批量通知消息", create_test_notification_layout),
        ("📊 每日服务报告", create_test_daily_report),
        ("🚀 服务启动通知", create_test_startup_notification),
        ("🔔 测试推送消息", create_test_message)
    ]
    
    for title, func in tests:
        print(f"\n{title}")
        print("-" * 50)
        print(func())
        print("\n" + "=" * 60)
        input("按 Enter 键查看下一个布局示例...")

if __name__ == "__main__":
    main() 